{"version":3,"sources":["all.min.js","_.mixins.js","cn-util.js"],"names":["empty","obj","_","isArray","length","each","val","key","add","x","slice","call","arguments","reduce","a","b","parseFloat","Math","round","subtract","multiply","divide","p","pow","floor","ceil","percentage","overflow","result","range","start","end","Number","dir","push","mixin","angular","module","factory","cleanModel","model","cleanModelVal","modelVal","forEach","isObject","undefined","diff","original","current","shallow","removeStrategy","console","log","getModified","copy","removeStretegies","delete","null","removeHandler","equals","modified","tmp","isEmpty","inheritCommon","from","to","extend","base","sub","ogProto","prototype","Object","create","constructor","defineProperty","enumerable","value","constructErrorMessageAsHtml","errors","errorMessage","error","description","constructPopoverHtml","objectsArray","nameKey","idKey","object","popoverHtml"],"mappings":"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","file":"all.min.js","sourcesContent":["'use strict';\n\n(function () {\n  'use strict';\n\n  /**\n   * Some useful util functions to add to lodash/underscore\n   *\n   * author: dzuch\n   */\n\n  _.mixin({\n    empty: empty,\n    add: add,\n    subtract: subtract,\n    multiply: multiply,\n    divide: divide,\n    round: round,\n    floor: floor,\n    ceil: ceil,\n    percentage: percentage,\n\n    /* TODO: remove this, not needed and can achieve with lodash\n     * Override lodash's range to allow high to low ranges\n     */\n    range: range\n  });\n\n  ////////\n\n  function empty(obj) {\n    if (_.isArray(obj)) {\n      obj.length = 0;\n      return obj;\n    }\n    _.each(obj, function (val, key) {\n      delete obj[key];\n    });\n    return obj;\n  }\n\n  function add(x) {\n    x = _.isArray(x) ? x : [].slice.call(arguments);\n\n    return _.reduce(x, function (a, b) {\n      a = parseFloat(a);\n      b = parseFloat(b);\n      return (Math.round(a * 100) + Math.round(b * 100)) / 100;\n    });\n  }\n\n  function subtract(x) {\n    x = _.isArray(x) ? x : [].slice.call(arguments);\n\n    return _.reduce(x, function (a, b) {\n      a = parseFloat(a);\n      b = parseFloat(b);\n      return (Math.round(a * 100) - Math.round(b * 100)) / 100;\n    });\n  }\n\n  function multiply(x) {\n    x = _.isArray(x) ? x : [].slice.call(arguments);\n\n    return _.reduce(x, function (a, b) {\n      a = parseFloat(a);\n      b = parseFloat(b);\n      return Math.round(a * 100) * Math.round(b * 100) / 10000;\n    });\n  }\n\n  function divide(x) {\n    x = _.isArray(x) ? x : [].slice.call(arguments);\n\n    return _.reduce(x, function (a, b) {\n      a = parseFloat(a);\n      b = parseFloat(b);\n      return Math.round(a * 100) / Math.round(b * 100);\n    });\n  }\n\n  function round(x, p) {\n    p = Math.pow(10, p || 0);\n    return Math.round(parseFloat(x) * p) / p;\n  }\n\n  function floor(x, p) {\n    p = Math.pow(10, p || 0);\n    return Math.floor(parseFloat(x) * p) / p;\n  }\n\n  function ceil(x, p) {\n    p = Math.pow(10, p || 0);\n    return Math.ceil(parseFloat(x) * p) / p;\n  }\n\n  function percentage(a, b, overflow) {\n    var result = _.round(100 * a / b);\n    if (!overflow) {\n      if (result > 100) result = 100;else if (result < 0) result = 0;\n    }\n    return result;\n  }\n\n  function range(start, end) {\n    start = Number(start);\n    end = Number(end);\n    var result = [],\n        dir = start <= end ? 1 : -1;\n    //end = end + dir;\n    while (start !== end) {\n      result.push(start);\n      start += dir;\n    }\n    return result;\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n  /**\n   * Definition for the cn.model module\n   */\n\n  angular.module('cn.util', []).factory('cnUtil', function () {\n    return {\n      cleanModel: cleanModel,\n      cleanModelVal: cleanModelVal,\n      diff: diff,\n      getModified: getModified,\n      inheritCommon: inheritCommon,\n      extend: extend,\n      constructErrorMessageAsHtml: constructErrorMessageAsHtml,\n      constructPopoverHtml: constructPopoverHtml\n    };\n\n    /////////\n\n    function cleanModel(model) {\n      _.each(model, cleanModelVal);\n      return model;\n    }\n\n    function cleanModelVal(modelVal) {\n      // if array,\n      if (_.isArray(modelVal)) {\n        modelVal.forEach(cleanModelVal);\n      } else if (_.isObject(modelVal)) {\n        _.each(modelVal, function (val, key) {\n          if (val === null || val === undefined) delete modelVal[key];else if (_.isArray(val)) val.forEach(cleanModelVal);else if (_.isObject(val)) cleanModelVal(val);\n        });\n      }\n      return modelVal;\n    }\n\n    function diff(original, current, shallow, removeStrategy) {\n      console.log('shallow:', shallow);\n      return getModified(original, current, removeStrategy || 'model', shallow);\n    }\n\n    function getModified(original, copy, removeStrategy, shallow) {\n      //console.log('getModified:', removeStrategy, shallow);\n      var removeStretegies = {\n        'delete': function _delete(obj, key) {\n          delete obj[key];\n        },\n        'null': function _null(obj, key) {\n          obj[key] = null;\n        }\n      };\n      var removeHandler = removeStretegies[removeStrategy] || removeStretegies[null];\n      if (removeStrategy === 'model') removeStrategy = 'delete';\n\n      if (angular.equals(original, copy)) {\n        return;\n      } else if (_.isArray(copy) || !_.isObject(copy)) {\n        return copy;\n      }\n      var modified = {};\n      _.each(copy, function (val, key) {\n        if (shallow) {\n          if (!angular.equals(val, original[key])) modified[key] = val;\n        } else {\n          var tmp = original[key] ? getModified(original[key], val, removeStrategy) : val;\n          if (tmp !== undefined && !angular.equals(original[key], tmp)) modified[key] = tmp;\n        }\n      });\n      _.each(original, function (val, key) {\n        if (val && (copy[key] === null || copy[key] === undefined)) removeHandler(modified, key);\n      });\n      if (!_.isEmpty(modified)) return modified;\n    }\n\n    function inheritCommon(from, to) {\n      _.each(to, function (val, key) {\n        if (key in from) {\n          val = from[key];\n          if (_.isObject(val) && !_.isArray(val) && to[key]) {\n            to[key] = inheritCommon(val, to[key]);\n          } else {\n            to[key] = val;\n          }\n        }\n      });\n      return to;\n    }\n\n    function extend(base, sub) {\n      // Avoid instantiating the base class just to setup inheritance\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n      // for a polyfill\n      // Also, do a recursive merge of two prototypes, so we don't overwrite\n      // the existing prototype, but still maintain the inheritance chain\n      // Thanks to @ccnokes\n      var ogProto = sub.prototype;\n      sub.prototype = Object.create(base.prototype);\n      _.extend(sub.prototype, ogProto);\n      // Remember the constructor property was set wrong, let's fix it\n      sub.prototype.constructor = sub;\n      // In ECMAScript5+ (all modern browsers), you can make the constructor property\n      // non-enumerable if you define it like this instead\n      Object.defineProperty(sub.prototype, 'constructor', {\n        enumerable: false,\n        value: sub\n      });\n    }\n\n    /**\n     * Used to build an HTML representation of the description keys in the errors array.\n     * See: API call GET /campaigns/:id/subCampaigns/status<\n     *\n     * Sample HTML <p>One error<br/>Another error</p>\n     *\n     * @param errors{array}\n     * @returns {string}\n     */\n    function constructErrorMessageAsHtml(errors) {\n      var errorMessage = '';\n      errors.forEach(function (error) {\n        errorMessage = errorMessage + '<p class=\"cn-error\">' + error.description + '</p>';\n      });\n      return errorMessage;\n    }\n\n    /**\n     * Used to append a popoverHtml key on the objects (campaigns, adSets, ads)\n     * that contains the name and id of the object so it can be show in in the popover\n     *\n     * @param objectsArray\n     * @param nameKey\n     * @param idKey\n     * @returns {*}\n     */\n    function constructPopoverHtml(objectsArray, nameKey, idKey) {\n      objectsArray.forEach(function (object) {\n        object.popoverHtml = '<p class=\"popover-text\">Name: ' + object[nameKey] + '</p>' + '<p class=\"popover-text\">ID: ' + object[idKey] + '</p>';\n      });\n      return objectsArray;\n    }\n  });\n})();","(function() {\n  'use strict';\n\n  /**\n   * Some useful util functions to add to lodash/underscore\n   *\n   * author: dzuch\n   */\n\n  _.mixin({\n    empty: empty,\n    add: add,\n    subtract: subtract,\n    multiply: multiply,\n    divide: divide,\n    round: round,\n    floor: floor,\n    ceil: ceil,\n    percentage: percentage,\n\n    /* TODO: remove this, not needed and can achieve with lodash\n     * Override lodash's range to allow high to low ranges\n     */\n    range: range\n  });\n\n  ////////\n\n  function empty(obj) {\n    if(_.isArray(obj)) {\n      obj.length = 0;\n      return obj;\n    }\n    _.each(obj, function(val, key) {\n      delete obj[key];\n    });\n    return obj;\n  }\n\n  function add(x) {\n    x = _.isArray(x) ? x : [].slice.call(arguments);\n\n    return _.reduce(x, function(a, b) {\n      a = parseFloat(a);\n      b = parseFloat(b);\n      return (Math.round(a * 100) + Math.round(b * 100)) / 100;\n    });\n  }\n\n  function subtract(x) {\n    x = _.isArray(x) ? x : [].slice.call(arguments);\n\n    return _.reduce(x, function(a, b) {\n      a = parseFloat(a);\n      b = parseFloat(b);\n      return (Math.round(a * 100) - Math.round(b * 100)) / 100;\n    });\n  }\n\n  function multiply(x) {\n    x = _.isArray(x) ? x : [].slice.call(arguments);\n\n    return _.reduce(x, function(a, b) {\n      a = parseFloat(a);\n      b = parseFloat(b);\n      return (Math.round(a * 100) * Math.round(b * 100)) / 10000;\n    });\n  }\n\n  function divide(x) {\n    x = _.isArray(x) ? x : [].slice.call(arguments);\n\n    return _.reduce(x, function(a, b) {\n      a = parseFloat(a);\n      b = parseFloat(b);\n      return (Math.round(a * 100) / Math.round(b * 100));\n    });\n  }\n\n  function round(x, p) {\n    p = Math.pow(10, p || 0);\n    return Math.round(parseFloat(x) * p) / p;\n  }\n\n  function floor(x, p) {\n    p = Math.pow(10, p || 0);\n    return Math.floor(parseFloat(x) * p) / p;\n  }\n\n  function ceil(x, p) {\n    p = Math.pow(10, p || 0);\n    return Math.ceil(parseFloat(x) * p) / p;\n  }\n\n  function percentage(a, b, overflow) {\n    var result = _.round(100 * a / b);\n    if(!overflow) {\n      if(result > 100) result = 100;\n      else if(result < 0) result = 0;\n    }\n    return result;\n  }\n\n  function range(start, end) {\n    start = Number(start);\n    end = Number(end);\n    var result = [],\n        dir = (start <= end) ? 1 : -1;\n    //end = end + dir;\n    while(start !== end) {\n      result.push(start);\n      start += dir;\n    }\n    return result;\n  }\n\n})();\n","(function() {\n  'use strict';\n  /**\n   * Definition for the cn.model module\n   */\n  angular.module('cn.util', [])\n      .factory('cnUtil', function() {\n        return {\n          cleanModel,\n          cleanModelVal,\n          diff,\n          getModified,\n          inheritCommon,\n          extend,\n          constructErrorMessageAsHtml,\n          constructPopoverHtml\n        };\n\n        /////////\n\n        function cleanModel(model) {\n          _.each(model, cleanModelVal);\n          return model;\n        }\n\n        function cleanModelVal(modelVal) {\n          // if array,\n          if(_.isArray(modelVal)) {\n            modelVal.forEach(cleanModelVal);\n          }\n          else if(_.isObject(modelVal)) {\n            _.each(modelVal, (val, key) => {\n              if(val === null || val === undefined) delete modelVal[key];\n              else if(_.isArray(val)) val.forEach(cleanModelVal);\n              else if(_.isObject(val)) cleanModelVal(val);\n            });\n          }\n          return modelVal;\n        }\n\n        function diff(original, current, shallow, removeStrategy) {\n          console.log('shallow:', shallow);\n          return getModified(original, current, removeStrategy || 'model', shallow);\n        }\n\n        function getModified(original, copy, removeStrategy, shallow) {\n          //console.log('getModified:', removeStrategy, shallow);\n          var removeStretegies = {\n            'delete': (obj, key) => {delete obj[key]},\n            'null': (obj, key) => {obj[key] = null}\n          };\n          var removeHandler = removeStretegies[removeStrategy] || removeStretegies[null];\n          if(removeStrategy === 'model') removeStrategy = 'delete';\n\n          if(angular.equals(original, copy)) {\n            return;\n          } else if(_.isArray(copy) || !_.isObject(copy)) {\n            return copy;\n          }\n          var modified = {};\n          _.each(copy, function(val, key) {\n            if(shallow) {\n              if(!angular.equals(val, original[key])) modified[key] = val;\n            }\n            else {\n              var tmp = original[key] ? getModified(original[key], val, removeStrategy) : val;\n              if(tmp !== undefined && !angular.equals(original[key], tmp)) modified[key] = tmp;\n            }\n          });\n          _.each(original, function(val, key) {\n            if(val && (copy[key] === null || copy[key] === undefined)) removeHandler(modified, key);\n          });\n          if(!_.isEmpty(modified)) return modified;\n        }\n\n        function inheritCommon(from, to) {\n          _.each(to, function(val, key) {\n            if(key in from) {\n              val = from[key];\n              if(_.isObject(val) && !_.isArray(val) && to[key]) {\n                to[key] = inheritCommon(val, to[key]);\n              }\n              else {\n                to[key] = val;\n              }\n            }\n          });\n          return to;\n        }\n\n        function extend(base, sub) {\n          // Avoid instantiating the base class just to setup inheritance\n          // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n          // for a polyfill\n          // Also, do a recursive merge of two prototypes, so we don't overwrite\n          // the existing prototype, but still maintain the inheritance chain\n          // Thanks to @ccnokes\n          var ogProto = sub.prototype;\n          sub.prototype = Object.create(base.prototype);\n          _.extend(sub.prototype, ogProto);\n          // Remember the constructor property was set wrong, let's fix it\n          sub.prototype.constructor = sub;\n          // In ECMAScript5+ (all modern browsers), you can make the constructor property\n          // non-enumerable if you define it like this instead\n          Object.defineProperty(sub.prototype, 'constructor', {\n            enumerable: false,\n            value: sub\n          });\n        }\n\n        /**\n         * Used to build an HTML representation of the description keys in the errors array.\n         * See: API call GET /campaigns/:id/subCampaigns/status<\n         *\n         * Sample HTML <p>One error<br/>Another error</p>\n         *\n         * @param errors{array}\n         * @returns {string}\n         */\n        function constructErrorMessageAsHtml(errors) {\n          var errorMessage = '';\n          errors.forEach(function(error) {\n            errorMessage = errorMessage + '<p class=\"cn-error\">' + error.description + '</p>';\n          });\n          return errorMessage;\n        }\n\n        /**\n         * Used to append a popoverHtml key on the objects (campaigns, adSets, ads)\n         * that contains the name and id of the object so it can be show in in the popover\n         *\n         * @param objectsArray\n         * @param nameKey\n         * @param idKey\n         * @returns {*}\n         */\n        function constructPopoverHtml(objectsArray, nameKey, idKey) {\n          objectsArray.forEach(function(object) {\n            object.popoverHtml = '<p class=\"popover-text\">Name: ' + object[nameKey] + '</p>' + '<p class=\"popover-text\">ID: ' + object[idKey] + '</p>';\n          });\n          return objectsArray;\n        }\n      });\n})();\n"],"sourceRoot":"/source/"}